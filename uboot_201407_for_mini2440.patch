diff -aruNp u-boot-2014.07/arch/arm/config.mk u-boot-2014.07_ok/arch/arm/config.mk
--- u-boot-2014.07/arch/arm/config.mk	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/arch/arm/config.mk	2014-09-10 08:36:35.000000000 +0800
@@ -80,7 +80,7 @@ PLATFORM_LIBS := arch/arm/lib/eabi_compa
 endif
 
 # needed for relocation
-LDFLAGS_u-boot += -pie
+#LDFLAGS_u-boot += -pie
 
 #
 # FIXME: binutils versions < 2.22 have a bug in the assembler where
@@ -102,7 +102,7 @@ endif
 
 ifneq ($(CONFIG_SPL_BUILD),y)
 # Check that only R_ARM_RELATIVE relocations are generated.
-ALL-y += checkarmreloc
+#ALL-y += checkarmreloc
 # The movt / movw can hardcode 16 bit parts of the addresses in the
 # instruction. Relocation is not supported for that case, so disable
 # such usage by requiring word relocations.
diff -aruNp u-boot-2014.07/arch/arm/cpu/arm920t/start.S u-boot-2014.07_ok/arch/arm/cpu/arm920t/start.S
--- u-boot-2014.07/arch/arm/cpu/arm920t/start.S	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/arch/arm/cpu/arm920t/start.S	2014-09-10 05:52:53.000000000 +0800
@@ -11,6 +11,13 @@
 #include <asm-offsets.h>
 #include <common.h>
 #include <config.h>
+#define pWTCON	0x53000000
+#define INTMSK	0x4A000008	/* Interrupt-Controller base addresses */
+#define INTSUBMSK	0x4A00001C
+#define CLKDIVN	0x4C000014	/* clock divisor register */
+#define MPLLCON 0x4c000004
+#define OUTPUT_405MHZ ((0x7f<<12)|(0x02<<4)|(0x1<<0))
+#define OUTPUT_400MHZ ((0x5c<<12)|(0x01<<4)|(0x1<<0))
 
 /*
  *************************************************************************
@@ -36,33 +43,10 @@ reset:
 	orr	r0, r0, #0xd3
 	msr	cpsr, r0
 
-#if	defined(CONFIG_AT91RM9200DK) || defined(CONFIG_AT91RM9200EK)
-	/*
-	 * relocate exception table
-	 */
-	ldr	r0, =_start
-	ldr	r1, =0x0
-	mov	r2, #16
-copyex:
-	subs	r2, r2, #1
-	ldr	r3, [r0], #4
-	str	r3, [r1], #4
-	bne	copyex
-#endif
 
 #ifdef CONFIG_S3C24X0
 	/* turn off the watchdog */
 
-# if defined(CONFIG_S3C2400)
-#  define pWTCON	0x15300000
-#  define INTMSK	0x14400008	/* Interrupt-Controller base addresses */
-#  define CLKDIVN	0x14800014	/* clock divisor register */
-#else
-#  define pWTCON	0x53000000
-#  define INTMSK	0x4A000008	/* Interrupt-Controller base addresses */
-#  define INTSUBMSK	0x4A00001C
-#  define CLKDIVN	0x4C000014	/* clock divisor register */
-# endif
 
 	ldr	r0, =pWTCON
 	mov	r1, #0x0
@@ -74,17 +58,27 @@ copyex:
 	mov	r1, #0xffffffff
 	ldr	r0, =INTMSK
 	str	r1, [r0]
-# if defined(CONFIG_S3C2410)
-	ldr	r1, =0x3ff
-	ldr	r0, =INTSUBMSK
-	str	r1, [r0]
-# endif
 
-	/* FCLK:HCLK:PCLK = 1:2:4 */
-	/* default FCLK is 120 MHz ! */
 	ldr	r0, =CLKDIVN
-	mov	r1, #3
+	mov	r1, #0x5
 	str	r1, [r0]
+	/* 
+	 * If HDIVN is not 0, the CPU bus mode has to be changed 
+	 * from the fast bus mode to the asynchronous 
+	 */
+    mrc    p15, 0, r1, c1, c0, 0        /* read control register */ 
+    orr    r1, r1, #0xc0000000          /* set asynchronous bus mode */
+    mcr    p15, 0, r1, c1, c0, 0        /* write control register */
+
+	/* UPLL should set before MPLL if needed */
+	/* Output Frequency set to 400MHz */
+	ldr r0, =MPLLCON
+	ldr r1, =OUTPUT_400MHZ
+	str r1, [r0]
+
+	mrc p15, 0, r0, c1, c0, 0 @ read control reg
+	orr r0, r0, #(1<<12)
+	mcr p15, 0, r0, c1, c0, 0 @ write it back
 #endif	/* CONFIG_S3C24X0 */
 
 	/*
diff -aruNp u-boot-2014.07/arch/arm/cpu/u-boot.lds u-boot-2014.07_ok/arch/arm/cpu/u-boot.lds
--- u-boot-2014.07/arch/arm/cpu/u-boot.lds	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/arch/arm/cpu/u-boot.lds	2014-09-11 01:52:23.000000000 +0800
@@ -18,8 +18,9 @@ SECTIONS
 	.text :
 	{
 		*(.__image_copy_start)
-		*(.vectors)
 		CPUDIR/start.o (.text*)
+		board/samsung/mini2440/lowlevel_init.o(.text*)
+		board/samsung/mini2440/init.o(.text*)
 		*(.text*)
 	}
 
diff -aruNp u-boot-2014.07/arch/arm/lib/board.c u-boot-2014.07_ok/arch/arm/lib/board.c
--- u-boot-2014.07/arch/arm/lib/board.c	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/arch/arm/lib/board.c	2014-09-11 02:11:33.000000000 +0800
@@ -260,7 +260,7 @@ init_fnc_t *init_sequence[] = {
 	NULL,
 };
 
-void board_init_f(ulong bootflag)
+unsigned int board_init_f(ulong bootflag)
 {
 	bd_t *bd;
 	init_fnc_t **init_fnc_ptr;
@@ -369,8 +369,7 @@ void board_init_f(ulong bootflag)
 	 * reserve memory for U-Boot code, data & bss
 	 * round down to next 4 kB limit
 	 */
-	addr -= gd->mon_len;
-	addr &= ~(4096 - 1);
+	addr = CONFIG_SYS_TEXT_BASE;
 
 	debug("Reserving %ldk for U-Boot at: %08lx\n", gd->mon_len >> 10, addr);
 
@@ -458,6 +457,7 @@ void board_init_f(ulong bootflag)
 		gd->fdt_blob = new_fdt;
 	}
 	memcpy(id, (void *)gd, sizeof(gd_t));
+	return (unsigned int)id;
 }
 
 #if !defined(CONFIG_SYS_NO_FLASH)
@@ -574,8 +574,7 @@ void board_init_r(gd_t *id, ulong dest_a
 		print_size(flash_size, "\n");
 # endif /* CONFIG_SYS_FLASH_CHECKSUM */
 	} else {
-		puts(failed);
-		hang();
+		puts("0KB\n");
 	}
 #endif
 
diff -aruNp u-boot-2014.07/arch/arm/lib/crt0.S u-boot-2014.07_ok/arch/arm/lib/crt0.S
--- u-boot-2014.07/arch/arm/lib/crt0.S	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/arch/arm/lib/crt0.S	2014-09-10 09:49:01.000000000 +0800
@@ -70,54 +70,36 @@ ENTRY(_main)
 	sub	sp, sp, #GD_SIZE	/* allocate one GD above SP */
 	bic	sp, sp, #7	/* 8-byte alignment for ABI compliance */
 	mov	r9, sp		/* GD is above SP */
-	mov	r0, #0
-	bl	board_init_f
 
-#if ! defined(CONFIG_SPL_BUILD)
+__TEXT_BASE:
+	.word CONFIG_SYS_TEXT_BASE
 
-/*
- * Set up intermediate environment (new sp and gd) and call
- * relocate_code(addr_moni). Trick here is that we'll return
- * 'here' but relocated.
- */
+	bl nand_init_ll
 
-	ldr	sp, [r9, #GD_START_ADDR_SP]	/* sp = gd->start_addr_sp */
-	bic	sp, sp, #7	/* 8-byte alignment for ABI compliance */
-	ldr	r9, [r9, #GD_BD]		/* r9 = gd->bd */
-	sub	r9, r9, #GD_SIZE		/* new GD is below bd */
-
-	adr	lr, here
-	ldr	r0, [r9, #GD_RELOC_OFF]		/* r0 = gd->reloc_off */
-	add	lr, lr, r0
-	ldr	r0, [r9, #GD_RELOCADDR]		/* r0 = gd->relocaddr */
-	b	relocate_code
-here:
-
-/* Set up final (full) environment */
-
-	bl	c_runtime_cpu_setup	/* we still call old routine here */
+	mov r0, #0
+	ldr r1, __TEXT_BASE
 
-	ldr	r0, =__bss_start	/* this is auto-relocated! */
-	ldr	r1, =__bss_end		/* this is auto-relocated! */
+	ldr r2, __TEXT_BASE
+	#ldr r3, =__bss_end
+	ldr r3, =__bss_start
 
-	mov	r2, #0x00000000		/* prepare zero to clear BSS */
+	sub r2, r3, r2
 
-clbss_l:cmp	r0, r1			/* while not at end of BSS */
-	strlo	r2, [r0]		/* clear 32-bit BSS word */
-	addlo	r0, r0, #4		/* move to next */
-	blo	clbss_l
+	bl copy_code_to_sdram
+	bl clear_bss
 
-	bl coloured_LED_init
-	bl red_led_on
+	ldr pc, =call_board_init_f
 
-	/* call board_init_r(gd_t *id, ulong dest_addr) */
-	mov     r0, r9                  /* gd_t */
-	ldr	r1, [r9, #GD_RELOCADDR]	/* dest_addr */
-	/* call board_init_r */
-	ldr	pc, =board_init_r	/* this is auto-relocated! */
+call_board_init_f:
+	mov r0, #0
+	bl board_init_f
 
-	/* we should not return here. */
+	ldr sp, [r9, #GD_START_ADDR_SP] /* sp = gd->start_addr_sp */
+	bic sp, sp, #7 /* 8-byte alignment forABI compliance */
+	ldr r9, [r9, #GD_BD] /* r9 = gd->bd */
+	sub r9, r9, #GD_SIZE /* new GD is below bd */
 
-#endif
+	ldr r1, __TEXT_BASE
+	bl board_init_r
 
 ENDPROC(_main)
diff -aruNp u-boot-2014.07/board/samsung/mini2440/init.c u-boot-2014.07_ok/board/samsung/mini2440/init.c
--- u-boot-2014.07/board/samsung/mini2440/init.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2014.07_ok/board/samsung/mini2440/init.c	2014-09-10 08:34:08.000000000 +0800
@@ -0,0 +1,150 @@
+#define TACLS   0
+#define TWRPH0  1
+#define TWRPH1  0
+
+/* NAND FLASH 控制器*/
+#define NFCONF (*((volatile unsigned long *)0x4E000000))
+#define NFCONT (*((volatile unsigned long *)0x4E000004))
+#define NFCMMD (*((volatile unsigned char *)0x4E000008))
+#define NFADDR (*((volatile unsigned char *)0x4E00000C))
+#define NFDATA (*((volatile unsigned char *)0x4E000010))
+#define NFSTAT (*((volatile unsigned char *)0x4E000020))
+
+
+void nand_read_ll(unsigned int addr, unsigned char *buf, unsigned int len);
+static int isBootFromNorFlash(void)
+{
+	volatile int *p = (volatile int*)0;
+	int val;
+
+	val = *p;
+	*p = 0x12345678;
+	if (*p == 0x12345678)
+	{
+		/* 写成功,是NAND启动 */
+		*p = val;
+		return 0;
+	}
+	else
+	{
+		/* NOR不能像内存一样写 */
+		return 1;
+	}
+}
+
+void copy_code_to_sdram(unsigned char *src, unsigned char *dest, unsigned int len)
+{
+	int i = 0;
+	/* 如果是NOR启动 */
+	if (isBootFromNorFlash())
+	{
+		while (i < len)
+		{
+			dest[i] = src[i];
+			i++;
+		}
+	}
+	else
+	{
+		nand_read_ll((unsigned int)src, dest, len);
+	}
+}
+
+void clear_bss(void)
+{
+	extern int __bss_start, __bss_end;
+	int *p = &__bss_start;
+
+	for(; p < &__bss_end; p++)
+		*p = 0;
+}
+
+void nand_init_ll(void)
+{
+	/* 设置时序 */
+    NFCONF = (TACLS<<12)|(TWRPH0<<8)|(TWRPH1<<4);
+    /* 使能NAND Flash控制器, 初始化ECC, 禁止片选 */
+    NFCONT = (1<<4)|(1<<1)|(1<<0);
+}
+
+static void nand_select(void)
+{
+	NFCONT &= ~(1<<1);
+}
+
+static void nand_deselect(void)
+{
+	NFCONT |= (1<<1);
+}
+
+static void nand_cmd(unsigned char cmd)
+{	
+	volatile int i;
+	NFCMMD = cmd;
+	for (i = 0; i < 10; i++);
+}
+
+static void nand_addr(unsigned int addr)
+{
+	unsigned int col  = addr % 2048;
+	unsigned int page = addr / 2048;
+	volatile int i;
+
+	NFADDR = col & 0xff;
+	for (i = 0; i < 10; i++);
+	NFADDR = (col >> 8) & 0xff;
+	for (i = 0; i < 10; i++);
+	
+	NFADDR = page & 0xff;
+	for (i = 0; i < 10; i++);
+	NFADDR = (page >> 8) & 0xff;
+	for (i = 0; i < 10; i++);
+	NFADDR = (page >> 16) & 0xff;
+	for (i = 0; i < 10; i++);
+}
+
+static void nand_wait_ready(void)
+{
+	while (!(NFSTAT & 1));
+}
+
+static unsigned char nand_data(void)
+{
+	return NFDATA;
+}
+
+void nand_read_ll(unsigned int addr, unsigned char *buf, unsigned int len)
+{
+	int col = addr % 2048;
+	int i = 0;
+	/* 1. 选中 */ 
+	nand_select();
+	
+	while (i < len)
+	{
+		/* 2. 发出读命令00h */
+		nand_cmd(0x00);
+		
+		/* 3. 发出地址(分5步发出) */
+		nand_addr(addr);
+		
+		/* 4. 发出读命令30h */
+		nand_cmd(0x30);
+		
+		/* 5. 判断状态 */
+		nand_wait_ready();
+		
+		/* 6. 读数据 */
+		for (; (col < 2048) &&(i < len); col++)
+		{
+			buf[i] = nand_data();
+			i++;
+			addr++;
+		}
+
+		col = 0;
+	}
+
+	/* 7. 取消选中 */
+	nand_deselect();
+}
diff -aruNp u-boot-2014.07/board/samsung/mini2440/lowlevel_init.S u-boot-2014.07_ok/board/samsung/mini2440/lowlevel_init.S
--- u-boot-2014.07/board/samsung/mini2440/lowlevel_init.S	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2014.07_ok/board/samsung/mini2440/lowlevel_init.S	2014-09-10 07:45:22.000000000 +0800
@@ -0,0 +1,148 @@
+/*
+ * Memory Setup stuff - taken from blob memsetup.S
+ *
+ * Copyright (C) 1999 2000 2001 Erik Mouw (J.A.K.Mouw@its.tudelft.nl) and
+ *                     Jan-Derk Bakker (J.D.Bakker@its.tudelft.nl)
+ *
+ * Modified for the Samsung SMDK2410 by
+ * (C) Copyright 2002
+ * David Mueller, ELSOFT AG, <d.mueller@elsoft.ch>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+
+#include <config.h>
+#include <version.h>
+
+
+/* some parameters for the board */
+
+/*
+ *
+ * Taken from linux/arch/arm/boot/compressed/head-s3c2410.S
+ *
+ * Copyright (C) 2002 Samsung Electronics SW.LEE  <hitchcar@sec.samsung.com>
+ *
+ */
+
+#define BWSCON	0x48000000
+
+/* BWSCON */
+#define DW8			(0x0)
+#define DW16			(0x1)
+#define DW32			(0x2)
+#define WAIT			(0x1<<2)
+#define UBLB			(0x1<<3)
+
+#define B1_BWSCON		(DW32)
+#define B2_BWSCON		(DW16)
+#define B3_BWSCON		(DW16 + WAIT + UBLB)
+#define B4_BWSCON		(DW16)
+#define B5_BWSCON		(DW16)
+#define B6_BWSCON		(DW32)
+#define B7_BWSCON		(DW32)
+
+/* BANK0CON */
+#define B0_Tacs			0x0	/*  0clk */
+#define B0_Tcos			0x0	/*  0clk */
+#define B0_Tacc			0x7	/* 14clk */
+#define B0_Tcoh			0x0	/*  0clk */
+#define B0_Tah			0x0	/*  0clk */
+#define B0_Tacp			0x0
+#define B0_PMC			0x0	/* normal */
+
+/* BANK1CON */
+#define B1_Tacs			0x0	/*  0clk */
+#define B1_Tcos			0x0	/*  0clk */
+#define B1_Tacc			0x7	/* 14clk */
+#define B1_Tcoh			0x0	/*  0clk */
+#define B1_Tah			0x0	/*  0clk */
+#define B1_Tacp			0x0
+#define B1_PMC			0x0
+
+#define B2_Tacs			0x0
+#define B2_Tcos			0x0
+#define B2_Tacc			0x7
+#define B2_Tcoh			0x0
+#define B2_Tah			0x0
+#define B2_Tacp			0x0
+#define B2_PMC			0x0
+
+#define B3_Tacs			0x0	/*  0clk */
+#define B3_Tcos			0x3	/*  4clk */
+#define B3_Tacc			0x7	/* 14clk */
+#define B3_Tcoh			0x1	/*  1clk */
+#define B3_Tah			0x0	/*  0clk */
+#define B3_Tacp			0x3     /*  6clk */
+#define B3_PMC			0x0	/* normal */
+
+#define B4_Tacs			0x0	/*  0clk */
+#define B4_Tcos			0x0	/*  0clk */
+#define B4_Tacc			0x7	/* 14clk */
+#define B4_Tcoh			0x0	/*  0clk */
+#define B4_Tah			0x0	/*  0clk */
+#define B4_Tacp			0x0
+#define B4_PMC			0x0	/* normal */
+
+#define B5_Tacs			0x0	/*  0clk */
+#define B5_Tcos			0x0	/*  0clk */
+#define B5_Tacc			0x7	/* 14clk */
+#define B5_Tcoh			0x0	/*  0clk */
+#define B5_Tah			0x0	/*  0clk */
+#define B5_Tacp			0x0
+#define B5_PMC			0x0	/* normal */
+
+#define B6_MT			0x3	/* SDRAM */
+#define B6_Trcd			0x1
+#define B6_SCAN			0x1	/* 9bit */
+
+#define B7_MT			0x3	/* SDRAM */
+#define B7_Trcd			0x1	/* 3clk */
+#define B7_SCAN			0x1	/* 9bit */
+
+/* REFRESH parameter */
+#define REFEN			0x1	/* Refresh enable */
+#define TREFMD			0x0	/* CBR(CAS before RAS)/Auto refresh */
+#define Trp			0x0	/* 2clk */
+#define Trc			0x3	/* 7clk */
+#define Tchr			0x2	/* 3clk */
+#define REFCNT			1113	/* period=15.6us, HCLK=60Mhz, (2048+1-15.6*60) */
+/**************************************/
+
+.globl lowlevel_init
+lowlevel_init:
+	/* memory control configuration */
+	/* make r0 relative the current location so that it */
+	/* reads SMRDATA out of FLASH rather than memory ! */
+	ldr     r0, =SMRDATA
+	ldr	r1, =CONFIG_SYS_TEXT_BASE
+	sub	r0, r0, r1
+	ldr	r1, =BWSCON	/* Bus Width Status Controller */
+	add     r2, r0, #13*4
+0:
+	ldr     r3, [r0], #4
+	str     r3, [r1], #4
+	cmp     r2, r0
+	bne     0b
+
+	/* everything is fine now */
+	mov	pc, lr
+
+	.ltorg
+/* the literal pools origin */
+
+SMRDATA:
+   	.long 0x22011110     //BWSCON
+	.long 0x00000700     //BANKCON0
+	.long 0x00000700     //BANKCON1
+	.long 0x00000700     //BANKCON2
+	.long 0x00000700     //BANKCON3  
+	.long 0x00000740     //BANKCON4
+	.long 0x00000700     //BANKCON5
+	.long 0x00018005     //BANKCON6
+	.long 0x00018005     //BANKCON7
+	.long 0x008C04F4     //REFRESH
+	.long 0x000000B1     //BANKSIZE
+	.long 0x00000030     //MRSRB6
+	.long 0x00000030     //MRSRB7
diff -aruNp u-boot-2014.07/board/samsung/mini2440/Makefile u-boot-2014.07_ok/board/samsung/mini2440/Makefile
--- u-boot-2014.07/board/samsung/mini2440/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2014.07_ok/board/samsung/mini2440/Makefile	2014-09-10 08:59:14.000000000 +0800
@@ -0,0 +1,10 @@
+#
+# (C) Copyright 2000-2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+obj-y	:= mini2440.o
+extra-y	:= init.o
+extra-y	+= lowlevel_init.o
diff -aruNp u-boot-2014.07/board/samsung/mini2440/mini2440.c u-boot-2014.07_ok/board/samsung/mini2440/mini2440.c
--- u-boot-2014.07/board/samsung/mini2440/mini2440.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2014.07_ok/board/samsung/mini2440/mini2440.c	2014-09-10 06:51:10.000000000 +0800
@@ -0,0 +1,118 @@
+/*
+ * (C) Copyright 2002
+ * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
+ * Marius Groeger <mgroeger@sysgo.de>
+ *
+ * (C) Copyright 2002, 2010
+ * David Mueller, ELSOFT AG, <d.mueller@elsoft.ch>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <netdev.h>
+#include <asm/io.h>
+#include <asm/arch/s3c24x0_cpu.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define FCLK_SPEED 1
+
+#if FCLK_SPEED==0		/* Fout = 203MHz, Fin = 12MHz for Audio */
+#define M_MDIV	0xC3
+#define M_PDIV	0x4
+#define M_SDIV	0x1
+#elif FCLK_SPEED==1		/* Fout = 202.8MHz */
+#define M_MDIV	0xA1
+#define M_PDIV	0x3
+#define M_SDIV	0x1
+#endif
+
+#define USB_CLOCK 1
+
+#if USB_CLOCK==0
+#define U_M_MDIV	0xA1
+#define U_M_PDIV	0x3
+#define U_M_SDIV	0x1
+#elif USB_CLOCK==1
+#define U_M_MDIV	0x48
+#define U_M_PDIV	0x3
+#define U_M_SDIV	0x2
+#endif
+
+static inline void pll_delay(unsigned long loops)
+{
+	__asm__ volatile ("1:\n"
+	  "subs %0, %1, #1\n"
+	  "bne 1b":"=r" (loops):"0" (loops));
+}
+
+/*
+ * Miscellaneous platform dependent initialisations
+ */
+
+int board_early_init_f(void)
+{
+	struct s3c24x0_gpio * const gpio = s3c24x0_get_base_gpio();
+
+	/* set up the I/O ports */
+	writel(0x007FFFFF, &gpio->gpacon);
+	writel(0x00044555, &gpio->gpbcon);
+	writel(0x000007FF, &gpio->gpbup);
+	writel(0xAAAAAAAA, &gpio->gpccon);
+	writel(0x0000FFFF, &gpio->gpcup);
+	writel(0xAAAAAAAA, &gpio->gpdcon);
+	writel(0x0000FFFF, &gpio->gpdup);
+	writel(0xAAAAAAAA, &gpio->gpecon);
+	writel(0x0000FFFF, &gpio->gpeup);
+	writel(0x000055AA, &gpio->gpfcon);
+	writel(0x000000FF, &gpio->gpfup);
+	writel(0xFF95FFBA, &gpio->gpgcon);
+	writel(0x0000FFFF, &gpio->gpgup);
+	writel(0x002AFAAA, &gpio->gphcon);
+	writel(0x000007FF, &gpio->gphup);
+
+	return 0;
+}
+
+int board_init(void)
+{
+	/* arch number of SMDK2410-Board */
+	gd->bd->bi_arch_number = MACH_TYPE_SMDK2410;
+
+	/* adress of boot parameters */
+	gd->bd->bi_boot_params = 0x30000100;
+
+	icache_enable();
+	dcache_enable();
+
+	return 0;
+}
+
+int dram_init(void)
+{
+	/* dram_init must store complete ramsize in gd->ram_size */
+	gd->ram_size = PHYS_SDRAM_1_SIZE;
+	return 0;
+}
+
+#ifdef CONFIG_CMD_NET
+int board_eth_init(bd_t *bis)
+{
+	int rc = 0;
+	rc = dm9000_initialize(bis);
+	return rc;
+}
+#endif
+
+/*
+ * Hardcoded flash setup:
+ * Flash 0 is a non-CFI AMD AM29LV800BB flash.
+ */
+ulong board_flash_get_legacy(ulong base, int banknum, flash_info_t *info)
+{
+	info->portwidth = FLASH_CFI_16BIT;
+	info->chipwidth = FLASH_CFI_BY16;
+	info->interface = FLASH_CFI_X16;
+	return 1;
+}
diff -aruNp u-boot-2014.07/boards.cfg u-boot-2014.07_ok/boards.cfg
--- u-boot-2014.07/boards.cfg	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/boards.cfg	2014-09-10 05:46:47.000000000 +0800
@@ -79,6 +79,7 @@ Active  arm         arm920t        ks869
 Active  arm         arm920t        ks8695      -               cm41xx              cm41xx                                -                                                                                                                                 -
 Active  arm         arm920t        s3c24x0     mpl             vcma9               VCMA9                                 -                                                                                                                                 David M眉ller <d.mueller@elsoft.ch>
 Active  arm         arm920t        s3c24x0     samsung         smdk2410            smdk2410                              -                                                                                                                                 David M眉ller <d.mueller@elsoft.ch>
+Active  arm         arm920t        s3c24x0     samsung         mini2440            mini2440                              -                                                                                                                                 David M眉ller <d.mueller@elsoft.ch>
 Active  arm         arm926ejs      -           armltd          integrator          integratorap_cm926ejs                 integratorap:CM926EJ_S                                                                                                            Linus Walleij <linus.walleij@linaro.org>
 Active  arm         arm926ejs      -           armltd          integrator          integratorcp_cm926ejs                 integratorcp:CM924EJ_S                                                                                                            Linus Walleij <linus.walleij@linaro.org>
 Active  arm         arm926ejs      armada100   Marvell         aspenite            aspenite                              -                                                                                                                                 Prafulla Wadaskar <prafulla@marvell.com>
diff -aruNp u-boot-2014.07/drivers/mtd/jedec_flash.c u-boot-2014.07_ok/drivers/mtd/jedec_flash.c
--- u-boot-2014.07/drivers/mtd/jedec_flash.c	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/drivers/mtd/jedec_flash.c	2014-09-10 06:30:52.000000000 +0800
@@ -350,6 +350,24 @@ static const struct amd_flash_info jedec
 		}
 	},
 #endif
+	/* mini2440 S29AL016J = Am29LV160D */
+	{  
+        .mfr_id     = (u16)AMD_MANUFACT,
+        .dev_id     = AM29LV160DB,     
+		.name		= "spansion s29al016j",
+        .uaddr      = {
+            [1] = MTD_UADDR_0x0555_0x02AA /* x16 */  
+        },  
+        .DevSize    = SIZE_2MiB,  
+        .CmdSet     = P_ID_AMD_STD,  
+        .NumEraseRegions= 4,  
+        .regions    = {  
+            ERASEINFO(0x04000,1),  /* 6  blocks */  
+            ERASEINFO(0x02000,2), /* 10 blocks */  
+            ERASEINFO(0x08000,1), /* 15 blocks */  
+            ERASEINFO(0x10000,31),  /* 1  blocks */  
+        }  
+    },  
 };
 
 static inline void fill_info(flash_info_t *info, const struct amd_flash_info *jedec_entry, ulong base)
diff -aruNp u-boot-2014.07/drivers/mtd/nand/Makefile u-boot-2014.07_ok/drivers/mtd/nand/Makefile
--- u-boot-2014.07/drivers/mtd/nand/Makefile	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/drivers/mtd/nand/Makefile	2014-09-10 07:28:20.000000000 +0800
@@ -56,6 +56,7 @@ obj-$(CONFIG_NAND_MXS) += mxs_nand.o
 obj-$(CONFIG_NAND_NDFC) += ndfc.o
 obj-$(CONFIG_NAND_NOMADIK) += nomadik.o
 obj-$(CONFIG_NAND_S3C2410) += s3c2410_nand.o
+obj-$(CONFIG_NAND_S3C2440) += s3c2440_nand.o
 obj-$(CONFIG_NAND_SPEAR) += spr_nand.o
 obj-$(CONFIG_TEGRA_NAND) += tegra_nand.o
 obj-$(CONFIG_NAND_OMAP_GPMC) += omap_gpmc.o
diff -aruNp u-boot-2014.07/drivers/mtd/nand/s3c2440_nand.c u-boot-2014.07_ok/drivers/mtd/nand/s3c2440_nand.c
--- u-boot-2014.07/drivers/mtd/nand/s3c2440_nand.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2014.07_ok/drivers/mtd/nand/s3c2440_nand.c	2014-09-03 23:11:36.000000000 +0800
@@ -0,0 +1,173 @@
+/*
+ * (C) Copyright 2006 OpenMoko, Inc.
+ * Author: Harald Welte <laforge@openmoko.org>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+
+#include <nand.h>
+#include <asm/arch/s3c24x0_cpu.h>
+#include <asm/io.h>
+
+#define S3C2410_NFCONF_EN          (1<<15)
+#define S3C2410_NFCONF_512BYTE     (1<<14)
+#define S3C2410_NFCONF_4STEP       (1<<13)
+#define S3C2410_NFCONF_INITECC     (1<<12)
+#define S3C2410_NFCONF_nFCE        (1<<11)
+#define S3C2410_NFCONF_TACLS(x)    ((x)<<8)
+#define S3C2410_NFCONF_TWRPH0(x)   ((x)<<4)
+#define S3C2410_NFCONF_TWRPH1(x)   ((x)<<0)
+
+#define S3C2410_ADDR_NALE 4
+#define S3C2410_ADDR_NCLE 8
+
+#ifdef CONFIG_NAND_SPL
+
+/* in the early stage of NAND flash booting, printf() is not available */
+#define printf(fmt, args...)
+
+static void nand_read_buf(struct mtd_info *mtd, u_char *buf, int len)
+{
+	int i;
+	struct nand_chip *this = mtd->priv;
+
+	for (i = 0; i < len; i++)
+		buf[i] = readb(this->IO_ADDR_R);
+}
+#endif
+
+
+/* ctrl : 表示做什么，选中芯片/取消选中，发命令还是发地址
+ *
+ * dat 	: 命令值或地址值
+ */
+static void s3c2440_hwcontrol(struct mtd_info *mtd, int dat, unsigned int ctrl)
+{
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+
+	if (ctrl & NAND_CLE)
+	{
+		/* 发命令 */
+		writeb(dat, &nand->nfcmd);
+	}
+	else if(ctrl & NAND_ALE)
+	{
+		/* 发地址 */
+		writeb(dat, &nand->nfaddr);
+	}
+}
+
+static int s3c2440_dev_ready(struct mtd_info *mtd)
+{
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+	debug("dev_ready\n");
+	return readl(&nand->nfstat) & 0x01;
+}
+
+static void s3c2440_nand_select(struct mtd_info *mtd, int chipnr)
+{
+	struct s3c2440_nand *nand = s3c2440_get_base_nand();
+
+	switch (chipnr) {
+	case -1:	/* 取消选中 */
+		nand->nfcont |= (1<<1);
+		break;
+	case 0:		/* 选中 */
+		nand->nfcont &= ~(1<<1);
+		break;
+
+	default:
+		BUG();
+	}
+}
+
+int board_nand_init(struct nand_chip *nand)
+{
+	u_int32_t cfg;
+	u_int8_t tacls, twrph0, twrph1;
+	struct s3c24x0_clock_power *clk_power = s3c24x0_get_base_clock_power();
+	struct s3c2440_nand *nand_reg = s3c2440_get_base_nand();
+
+	debug("board_nand_init()\n");
+
+	writel(readl(&clk_power->clkcon) | (1 << 4), &clk_power->clkcon);
+
+	/* initialize hardware */
+#if defined(CONFIG_S3C24XX_CUSTOM_NAND_TIMING)
+	tacls  = CONFIG_S3C24XX_TACLS;
+	twrph0 = CONFIG_S3C24XX_TWRPH0;
+	twrph1 =  CONFIG_S3C24XX_TWRPH1;
+#else
+	tacls  = 0;
+	twrph0 = 3;
+	twrph1 = 1;
+#endif
+
+#if 0
+	cfg = S3C2410_NFCONF_EN;
+	cfg |= S3C2410_NFCONF_TACLS(tacls - 1);
+	cfg |= S3C2410_NFCONF_TWRPH0(twrph0 - 1);
+	cfg |= S3C2410_NFCONF_TWRPH1(twrph1 - 1);
+#endif
+
+	/* 初始化时序 */
+	cfg = ((tacls-1)<<12) | ((twrph0-1)<<8) | ((twrph1-1)<<4);
+	writel(cfg, &nand_reg->nfconf);
+
+	/* 使能NAND Flash 控制器，初始化ECC，禁止片选 */
+	cfg = (1<<4)|(1<<1)|(1<<0);
+	writel(cfg, &nand_reg->nfcont);
+
+	/* initialize nand_chip data structure */
+	nand->IO_ADDR_R = (void *)&nand_reg->nfdata;
+	nand->IO_ADDR_W = (void *)&nand_reg->nfdata;
+
+	nand->select_chip = s3c2440_nand_select;
+
+	/* read_buf and write_buf are default */
+	/* read_byte and write_byte are default */
+#ifdef CONFIG_NAND_SPL
+	nand->read_buf = nand_read_buf;
+#endif
+
+	/* hwcontrol always must be implemented */
+	nand->cmd_ctrl = s3c2440_hwcontrol;
+
+	nand->dev_ready = s3c2440_dev_ready;
+
+#ifdef CONFIG_S3C2410_NAND_HWECC
+	nand->ecc.hwctl = s3c2410_nand_enable_hwecc;
+	nand->ecc.calculate = s3c2410_nand_calculate_ecc;
+	nand->ecc.correct = s3c2410_nand_correct_data;
+	nand->ecc.mode = NAND_ECC_HW;
+	nand->ecc.size = CONFIG_SYS_NAND_ECCSIZE;
+	nand->ecc.bytes = CONFIG_SYS_NAND_ECCBYTES;
+#else
+	nand->ecc.mode = NAND_ECC_SOFT;
+#endif
+
+#ifdef CONFIG_S3C2410_NAND_BBT
+	nand->options = NAND_USE_FLASH_BBT;
+#else
+	nand->options = 0;
+#endif
+
+	debug("end of nand_init\n");
+
+	return 0;
+}
diff -aruNp u-boot-2014.07/drivers/net/dm9000x.c u-boot-2014.07_ok/drivers/net/dm9000x.c
--- u-boot-2014.07/drivers/net/dm9000x.c	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/drivers/net/dm9000x.c	2014-09-10 07:11:21.000000000 +0800
@@ -369,15 +369,6 @@ static int dm9000_init(struct eth_device
 	/* Enable TX/RX interrupt mask */
 	DM9000_iow(DM9000_IMR, IMR_PAR);
 
-	i = 0;
-	while (!(dm9000_phy_read(1) & 0x20)) {	/* autonegation complete bit */
-		udelay(1000);
-		i++;
-		if (i == 10000) {
-			printf("could not establish link\n");
-			return 0;
-		}
-	}
 
 	/* see what we've got */
 	lnk = dm9000_phy_read(17) >> 12;
@@ -451,12 +442,13 @@ static int dm9000_send(struct eth_device
 static void dm9000_halt(struct eth_device *netdev)
 {
 	DM9000_DBG("%s\n", __func__);
-
+#if 0
 	/* RESET devie */
 	dm9000_phy_write(0, 0x8000);	/* PHY RESET */
 	DM9000_iow(DM9000_GPR, 0x01);	/* Power-Down PHY */
 	DM9000_iow(DM9000_IMR, 0x80);	/* Disable all interrupt */
 	DM9000_iow(DM9000_RCR, 0x00);	/* Disable RX */
+#endif	
 }
 
 /*
diff -aruNp u-boot-2014.07/include/common.h u-boot-2014.07_ok/include/common.h
--- u-boot-2014.07/include/common.h	2014-07-15 01:16:45.000000000 +0800
+++ u-boot-2014.07_ok/include/common.h	2014-09-10 08:29:28.000000000 +0800
@@ -286,7 +286,7 @@ int run_command_list(const char *cmd, in
 extern char console_buffer[];
 
 /* arch/$(ARCH)/lib/board.c */
-void	board_init_f(ulong);
+unsigned int	board_init_f(ulong);
 void	board_init_r  (gd_t *, ulong) __attribute__ ((noreturn));
 int	checkboard    (void);
 int	checkflash    (void);
diff -aruNp u-boot-2014.07/include/configs/mini2440.h u-boot-2014.07_ok/include/configs/mini2440.h
--- u-boot-2014.07/include/configs/mini2440.h	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2014.07_ok/include/configs/mini2440.h	2014-09-11 02:10:35.000000000 +0800
@@ -0,0 +1,157 @@
+/*
+ * (C) Copyright 2002
+ * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
+ * Marius Groeger <mgroeger@sysgo.de>
+ * Gary Jennejohn <garyj@denx.de>
+ * David Mueller <d.mueller@elsoft.ch>
+ *
+ * Configuation settings for the SAMSUNG SMDK2410 board.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+/* This is so helpful */
+//#define DEBUG
+/*
+ * High Level Configuration Options
+ * (easy to change)
+ */
+#define CONFIG_ARM920T		/* This is an ARM920T Core */
+#define CONFIG_S3C24X0		/* in a SAMSUNG S3C24x0-type SoC */
+#define CONFIG_S3C2440		/* specifically a SAMSUNG S3C2410 SoC */
+#define CONFIG_SMDK2410		/* on a SAMSUNG SMDK2410 Board */
+
+//#define CONFIG_SKIP_LOWLEVEL_INIT
+
+#define CONFIG_SYS_TEXT_BASE	0x33f80000
+
+#define CONFIG_SYS_ARM_CACHE_WRITETHROUGH
+
+/* input clock of PLL (the SMDK2410 has 12MHz input clock) */
+#define CONFIG_SYS_CLK_FREQ	12000000
+
+#define CONFIG_CMDLINE_TAG	/* enable passing of ATAGs */
+#define CONFIG_SETUP_MEMORY_TAGS
+#define CONFIG_INITRD_TAG
+
+#define CONFIG_DRIVER_DM9000 1
+#define CONFIG_NET_RETRY_COUNT 20
+#define CONFIG_DM9000_BASE  0x20000300
+#define DM9000_IO       CONFIG_DM9000_BASE
+#define DM9000_DATA     (CONFIG_DM9000_BASE + 4)
+#define CONFIG_DM9000_NO_SROM	1
+#define CONFIG_S3C24X0_SERIAL
+#define CONFIG_SERIAL1		1	/* we use SERIAL 1 on SMDK2410 */
+
+#define CONFIG_BAUDRATE		115200
+
+
+/*
+ * Command line configuration.
+ */
+#include <config_cmd_default.h>
+
+#define CONFIG_CMD_NAND
+#define CONFIG_CMD_PING
+
+#define CONFIG_SYS_HUSH_PARSER
+#define CONFIG_CMDLINE_EDITING
+
+/* autoboot */
+#define CONFIG_BOOTDELAY	5
+#define CONFIG_BOOT_RETRY_TIME	-1
+#define CONFIG_RESET_TO_RETRY
+#define CONFIG_ZERO_BOOTDELAY_CHECK
+
+#define CONFIG_NETMASK		255.255.255.0
+#define CONFIG_IPADDR		192.168.1.123
+#define CONFIG_SERVERIP		192.168.1.100
+#define CONFIG_ETHADDR		00:0c:29:4d:e4:f4
+/*
+ * Miscellaneous configurable options
+ */
+#define CONFIG_SYS_LONGHELP		/* undef to save memory */
+#define CONFIG_SYS_PROMPT	"mini2440 > "
+#define CONFIG_SYS_CBSIZE	256
+/* Print Buffer Size */
+#define CONFIG_SYS_PBSIZE	(CONFIG_SYS_CBSIZE + \
+				sizeof(CONFIG_SYS_PROMPT)+16)
+#define CONFIG_SYS_MAXARGS	16
+#define CONFIG_SYS_BARGSIZE	CONFIG_SYS_CBSIZE
+
+#define CONFIG_DISPLAY_CPUINFO				/* Display cpu info */
+
+#define CONFIG_SYS_MEMTEST_START	0x30000000	/* memtest works on */
+#define CONFIG_SYS_MEMTEST_END		0x33F00000	/* 63 MB in DRAM */
+
+#define CONFIG_SYS_LOAD_ADDR		0x30800000
+
+/*-----------------------------------------------------------------------
+#define CONFIG_BOOTARGS "console=ttySAC0,115200 root=/dev/mtdblock3 init=/linuxrc"
+#define CONFIG_BOOTCOMMAND "nand read 30000000 kernel ; bootm 30000000"
+ * Physical Memory Map
+ */
+#define CONFIG_NR_DRAM_BANKS	1          /* we have 1 bank of DRAM */
+#define PHYS_SDRAM_1		0x30000000 /* SDRAM Bank #1 */
+#define PHYS_SDRAM_1_SIZE	0x04000000 /* 64 MB */
+
+#define PHYS_FLASH_1		0x00000000 /* Flash Bank #0 */
+
+#define CONFIG_SYS_FLASH_BASE	PHYS_FLASH_1
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+
+#define CONFIG_SYS_FLASH_CFI
+#define CONFIG_FLASH_CFI_DRIVER
+#define CONFIG_FLASH_CFI_LEGACY
+#define CONFIG_SYS_FLASH_LEGACY_512Kx16
+#define CONFIG_FLASH_SHOW_PROGRESS	45
+
+#define CONFIG_SYS_MAX_FLASH_BANKS	1
+#define CONFIG_SYS_FLASH_BANKS_LIST     { CONFIG_SYS_FLASH_BASE }
+#define CONFIG_SYS_MAX_FLASH_SECT	(256)
+
+#define CONFIG_ENV_IS_IN_NAND
+#define CONFIG_ENV_OFFSET		0x40000
+#define CONFIG_ENV_SIZE			0x20000
+
+/* mtd */
+#define CONFIG_CMD_MTDPARTS
+#define CONFIG_MTD_DEVICE
+#define MTDIDS_DEFAULT		"nand0=mini2440-0"
+#define MTDPARTS_DEFAULT 	"mtdparts=mini2440-0:256k(u-boot),"	\
+							"128k(params),"	\
+							"2m(kernel),"	\
+							"-(rootfs)"		\
+/*
+ * Size of malloc() pool
+ * BZIP2 / LZO / LZMA need a lot of RAM
+ */
+#define CONFIG_SYS_MALLOC_LEN	(4 * 1024 * 1024)
+
+#define CONFIG_SYS_MONITOR_LEN	(448 * 1024)
+#define CONFIG_SYS_MONITOR_BASE	CONFIG_SYS_FLASH_BASE
+
+/*
+ * NAND configuration
+ */
+#ifdef CONFIG_CMD_NAND
+#define CONFIG_NAND_S3C2440
+//#define CONFIG_SYS_S3C2440_NAND_HWECC
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+#define CONFIG_SYS_NAND_BASE		0x4E000000
+#endif
+
+/* additions for new relocation code, must be added to all boards */
+#define CONFIG_SYS_SDRAM_BASE	PHYS_SDRAM_1
+#define CONFIG_SYS_INIT_SP_ADDR	(CONFIG_SYS_SDRAM_BASE + 0x1000 - \
+				GENERATED_GBL_DATA_SIZE)
+
+#define CONFIG_BOARD_EARLY_INIT_F
+
+#endif /* __CONFIG_H */
